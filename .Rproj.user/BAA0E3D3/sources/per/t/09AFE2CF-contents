# SETUP -----
source("scripts/setup.R")

# SETTINGS FOR SCRIPT ----
geo_level <- "state" # level of geography to fetch data for
acs_path <- "powerbi data/acs_housing_data_state.csv"
#bps_path <- "powerbi data/bps_data_latest.csv"
fort_stewart_ctys <- c("Bryan", "Bulloch", "Chatham", "Effingham",
                       "Evans", "Liberty", "Long", "Tattnall") # counties in the fort stewart "region"
counties_all <- counties(state="GA") %>% # list of all counties in GA
  pull(COUNTYFP)
st <- states() %>% # list of all counties in GA
  pull(STATEFP)
#st <- 13

year_acs <- 2023
years <- c(year_acs, year_acs-5, year_acs-10)

# VARIABLES ----
metadata <- load_variables(year_acs,"acs5")

concepts <- c("B25003", # tenure and tenure by race
              "B25007", # tenure by age
              "B11016", # household comp
              "B25009", # household size (by tenure)
              "B19001", # household income
              "B25105", # median monthly housing costs
              "B25070", # gross rent as % of hh income (may want time series)
                        # also covers rent burden
              "B19013", # median household income
              "B25091", # housing cost for homeowners
              "B25077", # median home value
              "B25075", # value of owner-occupied housing
              "B25024", # units in structure/housing type
              "B25032", # tenure by units in structure
              "B25034", # age of structure
              "B25002", # vacancy status
              "B25004",  # vacancy by type
              "B25072", # Rent Cost Burden By Age,
              "B25093" # mortgage cost burden by age
              )
acs_vars_codes <- load_variables(year_acs,"acs5") %>%
  mutate("group"=str_trunc(name,6,"right","")) %>%
  filter(group %in% concepts) %>%
  pull(name) 

# DATA PULLS -----                       

# ACS ----
years <- c(year_acs, year_acs-5, year_acs-10)
acs_data_raw <- map(years, ~{
  acs_vars_codes <- load_variables(.x,"acs5") %>%
    mutate("group"=str_trunc(name,6,"right","")) %>%
    filter(group %in% concepts) %>%
    pull(name)
  
get_acs(geography=geo_level,
                    state=st,
                    #county=counties_all,
                    variables = acs_vars_codes,
                    year=.x) %>%
  mutate(series=paste0(.x-4,"-",.x))
}) %>%
  data.table::rbindlist()
# median housing cost from realtor.com; need to consider inflation if using time series

# TOTAL HOUSING UNITS ----
if (geo_level == "county") {
hous19 <- get_estimates(year=2019,
              geography = geo_level,
              state=st,
              product="housing",
              time_series = TRUE) %>%
  # clean date
  filter(DATE > 2) %>%
  mutate(YEAR=DATE+2007) %>%
  select(-DATE) %>%
  select(NAME,YEAR,value)

hous23 <- readxl::read_xlsx("r data/CO-EST2023-HU-13.xlsx",
                            skip=5,
                            col_names = c("NAME","Base","2020","2021","2022","2023")) %>%
  select(-Base) %>%
  pivot_longer(cols=2:5,
               names_to = "YEAR") %>%
  mutate(NAME = str_remove(NAME,"\\.")) %>%
  filter(!is.na(value))
}
# HUD ----
#install.packages("hudr")
#library(hudr)

# HUD MEDIAN RENT ----
gafips <- counties(state="GA") %>%
  pull(GEOID)

rent50files <- list.files("r data/hud/median rent")[str_detect(list.files("r data/hud/median rent"),".xlsx")]
for(file in rent50files) {
  file_loop <- readxl::read_xlsx(paste0("r data/hud/median rent/",file)) 
  year <- as.numeric(str_remove(str_trunc(file,6,"right",""),"FY"))-1
  
  colnames(file_loop) <- str_remove_all(tolower(colnames(file_loop)),"_")
  if(year < 2021) {
  colnames(file_loop)[1] <- "fips"
  } else {
    file_loop <- file_loop %>%
      mutate("fips"=paste0(statecode,countycode))
  }
  
  file_loop <- file_loop %>%
    select(fips,rent501,rent502,rent503,rent504) %>%
    mutate(fips=str_remove(fips,"99999"),
           year=year) %>%
    #filter(fips %in% gafips) %>%
    pivot_longer(rent501:rent504) %>%
    mutate(bedrooms=str_remove(name,"rent50")) %>%
    mutate("var"="Median Rent")
  
  if(file == rent50files[1]) {
    hud_med_rent <- file_loop
  } else {
    hud_med_rent <- hud_med_rent %>%
      rbind(file_loop)
  }
}
hud_med_rent <- hud_med_rent %>%
  mutate(statecode=str_trunc(fips,2,"right",""))

# HUD FAIR MARKET RENT ----
fmrfiles <- list.files("r data/hud/fmr")[str_detect(list.files("r data/hud/fmr"),".xlsx")]
for(file in fmrfiles) {
  file_loop <- readxl::read_xlsx(paste0("r data/hud/fmr/",file)) 
  year <- as.numeric(paste0("20",(str_extract(file,"[:digit:][:digit:]"))))-1
  
  colnames(file_loop) <- str_remove_all(tolower(colnames(file_loop)),"_")
  fipscols <- colnames(file_loop)[str_detect(colnames(file_loop),"fips")]
  
  
  file_loop <- file_loop %>%
    select(fipscols[1],fmr1,fmr2,fmr3,fmr4)
  colnames(file_loop)[1] <- "fips"
  file_loop <- file_loop %>%
    mutate(fips=str_remove(fips,"99999"),
           year=year) %>%
    #filter(fips %in% gafips) %>%
    pivot_longer(fmr1:fmr4) %>%
    mutate(bedrooms=str_remove(name,"fmr")) %>%
    mutate("var"="Fair Market Rent")
  
  if(file == fmrfiles[1]) {
    hud_fmr <- file_loop
  } else {
    hud_fmr <- hud_fmr %>%
      rbind(file_loop)
  }
}
hud_fmr <- hud_fmr %>%
  mutate(statecode=str_trunc(fips,2,"right",""))
# DATA CLEANUP ----

# ACS ----
# ready metadata for join
years <- c(year_acs, year_acs-5, year_acs-10)
metadata_clean <- map(years, ~{
load_variables(.x,"acs5") %>%
    mutate("group"=str_trunc(name,6,"right","")) %>%
    filter(group %in% concepts) %>%
    mutate(series=paste0(.x-4,"-",.x))
}) %>%
  data.table::rbindlist() %>%
  mutate(concept=str_to_title(concept)) %>%
  rename("variable" = name) %>%
  select(-geography)

# clean dataset
df_acs_data <- acs_data_raw %>%
  # fix county name
  mutate(NAME=str_remove(NAME," County, Georgia")) %>%
  rename("COUNTY"=NAME) %>%
  # join with metadata
  left_join(metadata_clean) %>%
  # clean labels
  mutate("level"=case_when(label=="Estimate!!Total:" |
                             label=="Estimate!!Total"~"Total",
                           #str_detect(label,"Owner occupied:!!")~str_remove(label,"Estimate!!Total:!!Owner occupied:!!"),
                           #str_detect(label,"Renter occupied:!!")~str_remove(label,"Estimate!!Total:!!Renter occupied:!!"),
                           TRUE~str_remove(label,"Estimate!!Total:!!"))) %>%
  mutate(level=str_remove(level,"Estimate!!Total!!")) %>%
  mutate(level=str_remove(level,"Estimate!!")) %>%
  # filter out duplicate white var
  filter(!str_detect(concept,"White Alone Householder")) %>%
  # add race data if it exists
  mutate("race_eth"=case_when(str_detect(concept,"White Alone, Not Hispanic Or Latino")~"White",
                              str_detect(concept,"Black Or African American Alone")~"Black or African-American",
                              str_detect(concept,"Asian Alone") |
                                str_detect(concept,"American Indian And Alaska Native Alone") |
                                str_detect(concept,"Some Other Race Alone") |
                                str_detect(concept,"Native Hawaiian And Other Pacific Islander") |
                                str_detect(concept,"Two Or More Races") ~ "Other",
                                str_detect(concept,"Hispanic Or Latino")~"Hispanic",
                              TRUE~"No Race Data")) %>%
  # clean up age
  mutate("age"=case_when(str_detect(concept,"Age")~str_remove(level,".*Householder "),
                         TRUE~"No Age Data")) %>%
  mutate("age"=case_when(group %in% c("B25072","B25093")~str_remove(age,":!!.*"),
                         TRUE~age))  %>%
  mutate("level"=case_when(group %in% c("B25072","B25093")~str_replace(str_replace(str_remove(str_remove(level,".*:!!"),":!!"),
                                                                                   " percent","%"),"Less than 20.0%","19.9% or less"),
                         TRUE~level)) %>%
  filter(!(age %in% c("Owner occupied:","Renter occupied:"))) %>%
  filter(!str_detect(age,":")) %>%
  filter(!(level %in% c("Owner occupied:","Renter occupied:"))) %>%
    # clean up concept
  mutate("concept"=case_when(str_detect(concept,"Tenure \\(")~"Tenure by Race",
                             TRUE~concept)) %>%
  # calc totals and percents
  group_by(concept) %>%
  mutate("total"=case_when(level=="Total"~estimate,
                           TRUE~NA)) %>%
  fill(total) %>%
  ungroup() %>%
  mutate("total"=case_when(is.na(total)~estimate,
                           TRUE~total)) %>%
  mutate("pct"=estimate/total) %>%
  # code tenure
  mutate("tenure"=case_when(str_detect(level,"Owner occupied") |
                             str_detect(level,"Owner-occupied")~"Owner occupied",
                           str_detect(level,"Renter occupied") |
                             str_detect(level,"Renter-occupied")~"Renter occupied",
                           TRUE~"No Tenure Data")) %>%
  mutate(level=str_remove(level,"Owner-occupied housing units:!!")) %>%
  mutate(level=str_remove(level,"Renter-occupied housing units:!!")) %>%
  mutate(level=str_remove(level,"Owner-occupied housing units!!")) %>%
  mutate(level=str_remove(level,"Renter-occupied housing units!!")) %>%
  mutate(level=str_remove(level,"Renter occupied!!")) %>%
  mutate(level=str_remove(level,"Owner occupied!!")) %>%
  # manual variable removal
  filter(!(variable %in% c("B25009_002","B25009_010"))) %>%
  # code struc type
  mutate("struc_type"=case_when(str_detect(concept,"Units In Structure") 
                                           & level != "Owner-occupied housing units:"
                                           & level != "Renter-occupied housing units:"
                                           & level != "Owner-occupied housing units" 
                                           & level != "Renter-occupied housing units" ~ level,
                                           TRUE~"No Structure Data")) %>%
  mutate(struc_type=str_remove(struc_type,"Owner-occupied housing units:!!")) %>%
  mutate(struc_type=str_remove(struc_type,"Renter-occupied housing units:!!")) %>%
  mutate(struc_type=str_remove(struc_type,"Owner-occupied housing units!!")) %>%
  mutate(struc_type=str_remove(struc_type,"Renter-occupied housing units!!")) %>%
  mutate(struc_type=case_when(struc_type %in% c("50 or more", "20 to 49")~"Large structure (20 or more units)", # units in struc
                              struc_type %in% c("1, attached")~"Single unit (attached)",
                              struc_type %in% c("1, detached")~"Single unit (detached)",
                              struc_type %in% c("2")~"2 units",
                              #struc_type %in% c("3 or 4","5 to 9","10 to 19")~"Small structure (2-19 units)",
                              TRUE~paste(struc_type,"units"))) %>%
  filter(!str_detect(level,"without a mortgage")) %>%
  mutate(level=str_remove(level,"Housing units with a mortgage:!!"),
         level=str_remove(level,"Housing units without a mortgage:!!"),
         level=str_remove(level,"Housing units with a mortgage!!"),
         level=str_remove(level,"Housing units without a mortgage!!")) %>%
  # hh comp
  mutate("hh_comp" = case_when(str_detect(level,"Nonfamily households")~"Nonfamily households",
                                 str_detect(level,"Family households")~"Family households",
                                 TRUE~"No Comp Data"),
         level=str_remove(level,"Nonfamily households:!!"),
         level=str_remove(level,"Family households:!!")) %>%
  # manual type recodes
  mutate(level=case_when(str_detect(label,"Owner occupied:!!")~str_remove(label,"Estimate!!Total:!!Owner occupied:!!"),
              str_detect(label,"Renter occupied:!!")~str_remove(label,"Estimate!!Total:!!Renter occupied:!!"),
    TRUE~level))

#

# HOUSEHOLDS V UNITS ----
# for (y in c(2010:year_acs)) {
#   hh_unit_loop <- get_acs(geography="county",
#                           variable="S2502_C01_001",
#                         year=y,
#                         st="GA",
#                         county = counties_all,
#                         survey="acs5") %>%
#     mutate(YEAR=y)
#   
#   if(y==2010) {
#     hh_unit <- hh_unit_loop
#   } else {
#     hh_unit <- hh_unit %>%
#       rbind(hh_unit_loop)
#   }
# }
# 
# df_hh_unit <- hh_unit %>%
#   mutate(YEAR=as.character(YEAR),
#          NAME=str_remove(NAME," County, Georgia")) %>%
#   left_join(df_hous,by=c("NAME","YEAR")) %>%
#   select(-variable,-moe) %>%
#   rename("households"=estimate,
#          "units"=value)

# TOTAL HOUSING UNITS ----

df_hous <- hous19 %>%
  rbind(hous23) %>%
  mutate(NAME=str_remove(NAME," County, Georgia"))

# SAVE DATA -----
write_csv(df_acs_data,acs_path)
#write_csv(df_bps,bps_path)
#write_csv(df_rdc,"data/realtor_latest.csv")
state_names <- tigris::states()  %>% data.frame() %>% select(NAME,STATEFP)
hud_med_rent %>%
  rbind(hud_fmr %>% select(colnames(hud_med_rent))) %>%
  left_join(state_names,
            by=c("statecode"="STATEFP")) %>%
  rename("State"=NAME) %>%
  write_csv("powerbi data/hud_rent.csv")
write_csv(df_hous,"powerbi data/housing_units_1023.csv")
write_csv(df_hh_unit,"powerbi data/households_v_units.csv")

# FLAG CTY_DIMENSIONS ----
dimensions <- readxl::read_xlsx("r data/CountyDimensions12_6_2023.xlsx") %>%
  mutate("Fort Stewart Region"=case_when(County %in% fort_stewart_ctys ~ 1,
                                         TRUE~0))

writexl::write_xlsx(dimensions,"r data/Dimensions_FS.xlsx")


#################
### FUNCTIONS ###
#################

# This script creates a number of useful custom functions
# that can be used in the rapid development of simple data visualizations
# using any attached tidy dataset.

# They essentially create a simplified ggplot (with a number of modifiable settings)
# that significantly reduces the overall amount of code that a given script/
# presentation RMarkdown will require

# DATA CLEANING ----

# replacement for tigris counties
mds_counties <- function(state=st,path="D. data/") {
files <- list.files("D. data/")
if (sum(files %in% "USA_Counties_-_Generalized.shp") < 1) {
download.file("https://github.com/mduanes/us_counties/blob/main/US_Counties.zip?raw=TRUE",destfile=paste0(path,"US_counties.zip"),
              mode = "wb")
utils::unzip(paste0(path,"US_counties.zip"),exdir=path)
}
counties <- st_read(paste0(path,"USA_Counties_-_Generalized.shp"))
counties <- counties %>%
  filter(STATE_NAME == state | STATE_ABBR == state | STATE_FIPS == state) %>%
  rename("STATEFP"=STATE_FIPS,"COUNTYFP"=COUNTY_FIP) %>%
  mutate(GEOID=paste0(STATEFP,COUNTYFP)) %>%
  mutate(NAME=str_remove(NAME," County"))
counties
}

mds_places <- function(state=st,path="D. data/") {
  files <- list.files("D. data/")
  if (sum(files %in% "ga_places.json") < 1) {
    download.file("https://github.com/mduanes/us_counties/blob/main/ga_places.json?raw=TRUE",destfile=paste0(path,"ga_places.json"),
                  mode = "wb")
  }
  counties <- st_read(paste0(path,"ga_places.json"))
  stinfo <- mds_counties(state=state,path=path) %>%
    data.frame() %>%
    select(STATEFP,STATE_ABBR,STATE_NAME)
  
  counties <- counties %>%
    left_join(stinfo,by="STATEFP") %>%
    filter(STATE_NAME == state | STATE_ABBR == state | STATEFP == state)
  counties
}
# this is a copy of the function scales::percent() except the scale variable
# has been changed from 100 to 1. This way, inputting a value of 1 returns 1% rather
# than 100%
percent_marker <- function (x, accuracy = NULL, scale = 1, prefix = "", 
                            suffix = "%", big.mark = " ", decimal.mark = ".", 
                            trim = TRUE, ...) 
{
  scales::number(x = x, accuracy = accuracy, scale = scale, prefix = prefix, 
         suffix = suffix, big.mark = big.mark, decimal.mark = decimal.mark, 
         trim = trim, ...)
}

# function to automatically join the relevant geometries from tigris
join_geometries <- function(data) {
  
  GEOID <- data$GEOID
  
  # detect geometry type and load appropriate tigris shapefile
  if (nchar(GEOID[1]) == 5) {
    geometry <- mds_counties(state=st) %>%
      select(GEOID)
    print("Joining County Geometry...")
  } else {
    geometry <- tracts(state=st,county = ctys) %>%
      select(GEOID)
    print("Joining Tract Geometry...")
  } 
  
  # convert to numeric if the dataset uses a numeric GEOID
  if(is.numeric(data$GEOID)) {
    geometry <- geometry %>%
      mutate(GEOID=as.numeric(GEOID))
  }
    
  # join data and geometry and convert to simple features
  output <- data %>%
    left_join(geometry) %>%
    st_as_sf()
  
  output
}

# finds variable codes based on a keyword search
acs_lookup <- function(searches,y_acs = year) {
  # set acs to max year if too high
  y_acs <- year(Sys.Date()) - 2
  
  # load metadata
  metadata <- load_variables(y_acs,"acs5") %>%
    # search for specified term
    filter(concept %in% toupper(searches))  
  
  output <- metadata
  output
}

# GRAPHS ----

# creates a basic ggplot line chart given specifications 
# options for graph are line, chart, and bar
graph <- function(data, x, y, graph_type = "line", groups=NULL, 
                       pal=default_pal_discrete, 
                       show_legend=FALSE, 
                       title = NULL, x_lab = NULL, y_lab = NULL, legend_lab = "Legend",
                       commas_x = FALSE, commas_y = FALSE,
                       pct_x = FALSE, pct_y = FALSE,
                       label = NULL, legend_pos = "right",
                  disable_y = FALSE,
                   graph_linewidth = default_graph_linewidth,
                       legend_rows = 2,
                       line_width = default_line_width, point_size=default_point_size,
                       label_color=default_label_color,
                       caption = NULL,axis_text_size=default_axis_text_size) {
  
  # set group aesthetic and x/y labels to defaults if not specified in function call
  if(is.null(groups)) {
    data <- data %>%
      mutate("no groups"="no groups")
    groups <- "no groups"
  }
  
  if(is.null(x_lab)) {
    x_lab <- x
  }
  if(is.null(y_lab)) {
    y_lab <- y
  }
  
  # establish ggplot object based on call
  graph <- ggplot(data,mapping=aes(x=.data[[x]],
                                   y=.data[[y]],
                                   color=.data[[groups]],
                                   fill=.data[[groups]],
                                   group=.data[[groups]])) +
    # add basic aesthetic settings
    scale_color_manual(values=pal,name=legend_lab) +
    scale_fill_manual(values=pal,name=legend_lab) +
    theme_bw() +
    labs(title=title,x=x_lab,y=y_lab,caption=caption) +
    theme(axis.text = element_text(size=axis_text_size),
          axis.title = element_text(size=axis_text_size,face = "bold"),
          legend.text = element_text(size=axis_text_size*0.5),
          legend.title = element_text(size=axis_text_size,face="bold"),
          legend.position = legend_pos,
          panel.grid = element_line(linewidth=graph_linewidth/2),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.background = element_rect(fill = "transparent", color = NA),
          axis.ticks.x = element_blank(),
          plot.caption = element_text(size=0.6*axis_text_size,face="italic",
                                      hjust=0.5))
  
  if(tolower(legend_pos) == "bottom") {
    graph <- graph +
      guides(color=guide_legend(nrow=legend_rows))
  }
  
  # add geoms based on function specification
  if(tolower(graph_type)=="line") {
    graph <- graph +
      geom_line(lwd=line_width) +
      #geom_point(size=point_size) +
      theme(panel.grid.major.x = element_blank(),
            panel.grid.minor.x = element_blank(),
            axis.text = element_text(face="bold"))
  }
  
  if(tolower(graph_type)=="bar") {
    graph <- graph +
      geom_col(linewidth=0) +
      theme(panel.grid.major.x = element_blank(),
            panel.grid.minor.x = element_blank(),
            panel.grid.major.y = element_blank(),
            panel.grid.minor.y = element_blank(),
            axis.text = element_text(face="bold"))
  }
  
  if(tolower(graph_type)=="col") {
    graph <- graph +
      geom_col(linewidth=0) +
      theme(panel.grid.major.y = element_blank(),
            panel.grid.minor.y = element_blank(),
            panel.grid.major.x = element_blank(),
            panel.grid.minor.x = element_blank(),
            axis.text = element_text(face="bold"))
  }

  # remove legend if specified 
  if(show_legend == FALSE) {
    graph <- graph +
      theme(legend.position = "none")
  }
  
  # add labels to graph if specified
  if(!is.null(label)) {
    graph <- graph +
      geom_text(mapping=aes(label=format(.data[[label]],digits=2)),
                fontface="bold",color=label_color,
                position=position_stack(vjust=0.5),
                size=default_axis_text_size/3)
    }
  
  # add axis comma/pct formatting if specified
  if (commas_x == TRUE & commas_y == FALSE) {
    graph <- graph +
      scale_x_continuous(labels = scales::comma)
  }
  
  if (commas_x == FALSE & commas_y == TRUE) {
    graph <-  graph +
      scale_y_continuous(labels = scales::comma)
  }
  
  if (commas_x == TRUE & commas_y == TRUE) {
    graph <- graph +
      scale_y_continuous(labels = scales::comma) +
      scale_x_continuous(labels = scales::comma)
  }
  
  if (pct_x == TRUE & pct_y == FALSE) {
    graph <- graph +
      scale_x_continuous(labels = percent_marker)
  }
  
  if (pct_x == FALSE & pct_y == TRUE) {
    graph <-  graph +
      scale_y_continuous(labels = percent_marker)
  }
  
  if (pct_x == TRUE & pct_y == TRUE) {
    graph <- graph +
      scale_y_continuous(labels = percent_marker) +
      scale_x_continuous(labels = percent_marker)
  }
  
  if (disable_y == TRUE) {
    graph <- graph +
      theme(axis.text.y = element_blank(),
            axis.ticks.y = element_blank())
  }
  
  # return final object
  graph
}

# MAPS ----

# returns a choropleth map of a single variable
choropleth <- function(data, col, pal=default_pal_discrete, 
                       show_legend=FALSE, title = NULL, 
                       legend_lab = "Legend",
                       legend_pct=FALSE,
                       type="discrete",
                       caption=NULL,
                       axis_text_size=default_axis_text_size,
                       line_width=default_graph_linewidth) {
  
  midpoint <- mean(data[[col]])
  
  if(type=="discrete") {
  graph <- ggplot(data,mapping=aes(fill=.data[[col]])) +
    # add basic aesthetic settings
    scale_fill_manual(values=pal,name=legend_lab) +
    theme_minimal() +
    labs(title=title,caption=caption)  +
    theme(axis.text = element_blank(),
          legend.background = element_rect(fill = "transparent", color = NA),
          panel.grid = element_blank(),
          legend.text = element_text(size=axis_text_size*0.5),
          legend.title = element_text(size=axis_text_size,face="bold"),
          plot.caption = element_text(size=0.6*axis_text_size,face="italic",
                                      hjust=0.5)) +
    geom_sf(linewidth=line_width/1.5,color="white")
  } else if(type=="gradient") {
    graph <- ggplot(data,mapping=aes(fill=.data[[col]])) +
      scale_fill_gradient2(high=pal[5],
                           mid=pal[3],
                           low=pal[1],name=legend_lab,
                           midpoint=midpoint,
                          labels=scales::comma,
                          breaks=c(min(data[[col]])-1,
                                   0,
                                   midpoint,
                                   max(data[[col]])+1),
                          limits=c(min(data[[col]])-1,
                                   max(data[[col]])+1)) +
      #guides(fill=guide_legend(ncol=1)) +
      # add basic aesthetic settings
      theme_minimal() +
      labs(title=title,caption=caption)  +
      theme(axis.text = element_blank(),
            panel.grid = element_blank(),
            legend.background = element_rect(fill = "transparent", color = NA),
            legend.text = element_text(size=axis_text_size*0.5),
            legend.title = element_text(size=axis_text_size,face="bold"),
            plot.caption = element_text(size=0.6*axis_text_size,face="italic",
                                        hjust=0.5)) +
      geom_sf(linewidth=line_width/1.5,color="white")
    
    if (legend_pct == TRUE) {
      graph <- graph +
        scale_fill_gradient2(high=pal[5],
                             mid=pal[3],
                             low=pal[1],name=legend_lab,
                             midpoint=midpoint,
                             labels=percent_marker,
                             breaks=c(min(data[[col]])-1,
                                      0,
                                      midpoint,
                                      max(data[[col]])+1),
                             limits=c(min(data[[col]])-1,
                                     max(data[[col]])+1)) 
                             # limits=c(floor(min(data[[col]])/10)*10,
                             #          ceiling(max(data[[col]])/10)*10))
    }
  } else {
    print("Invalid graph type")
  }
  # remove legend if specified 
  if(show_legend == FALSE) {
    graph <- graph +
      theme(legend.position = "none")
  }
  graph
}

# DATASETS ----
# these functions pull in data for use
# they should not have to be manually called in most cases but instead specified in
# settings 

# Decennial Race
get_decennial_race <- function(geography="county",counties=ctys,state=st,y_dec=year) {
  if (length(state) == 1) {
  
  # adjust year to nearest census year
  y_dec <- round_any(y_dec,10,f=floor)
  
  # pull data
  output <- get_decennial(geography=geography,
                          state=state,
                          output = 'wide',
                          year = y_dec,
                              variables = race_vars,
                              county = counties,
                              geometry = FALSE, cb = FALSE)
  
  output
  } else {
    for (s in state) {
    counties_l <- str_remove(ctys[str_detect(ctys,s)],",.*")
    # adjust year to nearest census year
    y_dec <- round_any(y_dec,10,f=floor)
    
    # pull data
    output_l <- get_decennial(geography=geography,
                              state=s,
                              output = 'wide',
                              year = y_dec,
                              variables = race_vars,
                              county = counties_l,
                              geometry = FALSE, cb = FALSE)
    
    if(s == state[1]) {
      output <- output_l
    } else {
      output <- output %>%
        rbind(output_l)
    }
    }
    output
  }
}

get_acs_multiple_vars <- function(geography="county",
                                  counties=ctys,state=st,
                                  specify_vars = FALSE,
                                  y=y_acs,
                                  specified_vars = NULL) {
  
  if (specify_vars == TRUE) {
  # load metadata for specific var codes
  metadata <- load_variables(y,"acs5") %>%
    filter(name %in% specified_vars)
  
  vars <- metadata$name
  
  colnames(metadata) <- c("variable","var_name","description","geography")
  
  # if not specified, use general list
  } else {
    metadata <- read_tsv("D. data/acs_vars_metadata_long_2024.txt") %>%
      # specify some specific variable groups
      mutate(var_group=case_when(var_name=="Rent50pct"~"Rent50",
                                 var_name=="Own50pct"~"Own50",
                                 TRUE~var_group)) 
    
    # pull out variables and specify desired vars
    vars <- metadata$variable
    vars <- c(vars, "B17001_001",
              "B17001_004","B17001_005","B17001_006","B17001_007","B17001_008","B17001_009","B17001_015","B17001_016",
              "B17001_018","B17001_019","B17001_020","B17001_021","B17001_022","B17001_023","B17001_029","B17001_030")
  }
  
  if (length(state) == 1) {
  output <- get_acs(geography = geography, 
                         county = counties,
                         state = state,
                         variable = vars,
                         year = y, 
                         survey = 'acs5',
                         geometry = FALSE) %>%
    left_join(metadata)
  } else {
    for (s in state) {
      counties_l <- str_remove(counties[str_detect(counties,s)],",.*")
      output_l <- get_acs(geography = geography, 
                        county = counties_l,
                        state = s,
                        variable = vars,
                        year = y, 
                        survey = 'acs5',
                        geometry = FALSE) %>%
        left_join(metadata)
      
      if(s == state[1]) {
        output <- output_l
      } else {
        output <- output %>%
          rbind(output_l)
      }
    }
  }
  output
}

# same as above function but for three 5-year acs periods
get_acs_time_series <- function(geography="county",
                                  counties=ctys,state=st,
                                  specify_vars = FALSE,
                                  specified_vars = NULL) {
  
  if (specify_vars == TRUE) {
    # load metadata
    metadata <- load_variables(y_acs,"acs5") %>%
      filter(name %in% specified_vars)
    
    vars <- metadata$name
    
    colnames(metadata) <- c("variable","var_name","description","geography")
  } else {
    metadata <- read_tsv("D. data/acs_vars_metadata_long_2024.txt") %>%
      # specify some specific variable groups
      mutate(var_group=case_when(var_name=="Rent50pct"~"Rent50",
                                 var_name=="Own50pct"~"Own50",
                                 TRUE~var_group)) 
    
    # pull out variables and specify desired vars
    vars <- metadata$variable
    vars <- c(vars, "B17001_001",
              "B17001_004","B17001_005","B17001_006","B17001_007","B17001_008","B17001_009","B17001_015","B17001_016",
              "B17001_018","B17001_019","B17001_020","B17001_021","B17001_022","B17001_023","B17001_029","B17001_030")
  }
  
  # set years for time series
  years <- c(y_acs-9,y_acs-4,y_acs)
  
  # run for each year
  
  for (i in years) {
  output_loop <- get_acs_multiple_vars(y_acs = i) %>%
    mutate("year"=i)
  
  if (i == years[1]) {
    output <- output_loop
  } else {
    output <- output %>%
      rbind(output_loop)
  }
  }
  output %>%
    left_join(metadata)
}

# COMPONENTS OF CHANGE
get_components_of_change <- function(geography="county",
                                     counties=ctys,state=st,y_comp=year,
                                     specify_vars = FALSE,
                                     specified_vars = NULL) {
  if (length(state) == 1) {
  # pull components of pop change from population estimates for latest vintage
  output <- get_estimates(geography=geography,
                                 county=counties,
                                 state=state,
                                 time_series = TRUE,
                                 year=y_comp,
                                 variables=c("BIRTHS","DEATHS","NETMIG"))
  
  # repeat for vintage 2019 if needed
  if(y_comp > 2019) {
  df_components19 <- get_estimates(geography=geography,
                                 county=counties,
                                 state=state,
                                 time_series = TRUE,
                                 variables=c("BIRTHS","DEATHS","NETMIG"),
                                 year=2019) %>%
    # make year human-readable
    mutate("year"=as.character(2009+PERIOD)) %>%
    select(colnames(output))
  }
     #append to create one dataframe
     output <- output %>%
      rbind(df_components19) 
  } else {
    for (s in state) {
      counties_l <- str_remove(ctys[str_detect(ctys,s)],",.*")
    # pull components of pop change from population estimates for latest vintage
      output_l <- get_estimates(geography=geography,
                            county=counties_l,
                            state=s,
                            time_series = TRUE,
                            year=y_comp,
                            variables=c("BIRTHS","DEATHS","NETMIG"))
    
    # repeat for vintage 2019 if needed
    if(y_comp > 2019) {
      df_components19 <- get_estimates(geography=geography,
                                       county=counties_l,
                                       state=s,
                                       time_series = TRUE,
                                       variables=c("BIRTHS","DEATHS","NETMIG"),
                                       year=2019) %>%
        # make year human-readable
        mutate("year"=as.character(2009+PERIOD)) %>%
        select(colnames(output))
    }
    #append to create one dataframe
    output_l <- output_l %>%
      rbind(df_components19)
    
    if (s == state[1]) {
      output <- output_l
    } else {
      output <- output %>%
        rbind(output_l)
    }
    }
  }
    output
}

# POPULATION ESTIMATES
get_population_estimates <- function(geography="county",
                                     counties=ctys,state=st,y_comp=year,
                                     specify_vars = FALSE,
                                     specified_vars = NULL) {
  if (length(state) == 1) {
  # pull components of pop change from population estimates for latest vintage
  output <- get_estimates(geography=geography,
                          county=counties,
                          state=state,
                          time_series = TRUE,
                          year=y_comp,
                          product="population") %>%
    filter(variable == "POPESTIMATE") 
  
  # repeat for vintage 2019 if needed
  if(y_comp > 2019) {
    df_estimates19 <- get_estimates(geography=geography,
                                     county=counties,
                                     state=state,
                                     time_series = TRUE,
                                     product="population",
                                     year=2019) %>%
      filter(variable == "POP" & DATE >= 3) %>%
      # make year human-readable
      mutate("year"=as.character(2007+DATE)) %>%
      select(colnames(output))
  }
  #append to create one dataframe
  output <- output %>%
    rbind(df_estimates19) %>%
    select(-variable)
  
  } else {
    for (s in state) {
      counties_l <- str_remove(ctys[str_detect(ctys,s)],",.*")
      
      # pull components of pop change from population estimates for latest vintage
      output_l <- get_estimates(geography=geography,
                              county=counties_l,
                              state=s,
                              time_series = TRUE,
                              year=y_comp,
                              product="population") %>%
        filter(variable == "POPESTIMATE") 
      
      # repeat for vintage 2019 if needed
      if(y_comp > 2019) {
        df_estimates19 <- get_estimates(geography=geography,
                                        county=counties_l,
                                        state=s,
                                        time_series = TRUE,
                                        product="population",
                                        year=2019) %>%
          filter(variable == "POP" & DATE >= 3) %>%
          # make year human-readable
          mutate("year"=as.character(2007+DATE)) %>%
          select(colnames(output))
      }
      #append to create one dataframe
      output_l <- output_l %>%
        rbind(df_estimates19) %>%
        select(-variable)
      if (s == state[1]) {
        output <- output_l
      } else {
        output <- output %>%
          rbind(output_l)
      }
    }
  }
  output
  }



# theme definition
theme_adg_map <- theme_minimal() +
  theme(axis.text = element_blank(),
        legend.background = element_rect(fill = "transparent", color = NA),
        panel.grid = element_blank(),
        legend.text = element_text(size=default_axis_text_size*0.5),
        legend.title = element_text(size=default_axis_text_size,face="bold"),
        plot.caption = element_text(size=0.6*default_axis_text_size,face="italic",
                                    hjust=0.5))

theme_adg <- theme_minimal() + 
  theme(axis.text = element_text(size=default_axis_text_size),
        axis.title = element_text(size=default_axis_text_size,face = "bold"),
        legend.text = element_text(size=default_axis_text_size*0.5),
        legend.title = element_text(size=default_axis_text_size,face="bold"),
        legend.position = default_legend_position,
        legend.background = element_rect(fill = "transparent", color = NA),
        panel.grid = element_line(linewidth=default_graph_linewidth),
        panel.grid.minor = element_line(linetype="dashed"),
        panel.border = element_rect(linewidth=default_graph_linewidth*1.5),
        plot.caption = element_text(size=0.6*default_axis_text_size,face="italic",
                                    hjust=0.5))
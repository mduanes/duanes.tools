document
document()
library(devtools)
devtools::document()
devtools::document()
devtools::document()
metadata <- read_tsv(paste0(adg_path,"Data/ACS Metadata/acs_vars_metadata_long_2024.txt")) %>%
# specify some specific variable groups
mutate(var_group=case_when(var_name=="Rent50pct"~"Rent50",
var_name=="Own50pct"~"Own50",
TRUE~var_group))
library(tidyverse)
metadata <- read_tsv(paste0(adg_path,"Data/ACS Metadata/acs_vars_metadata_long_2024.txt")) %>%
# specify some specific variable groups
mutate(var_group=case_when(var_name=="Rent50pct"~"Rent50",
var_name=="Own50pct"~"Own50",
TRUE~var_group))
metadata <- read_tsv(paste0(Sys.getenv("ADG_KEY"),"Data/ACS Metadata/acs_vars_metadata_long_2024.txt")) %>%
# specify some specific variable groups
mutate(var_group=case_when(var_name=="Rent50pct"~"Rent50",
var_name=="Own50pct"~"Own50",
TRUE~var_group))
View(metadata)
round_any(1,10)
library(tidyverse)
round_any(1,10)
plyr::round_any(1,10)
plyr::round_any(6,10)
nchar(100)
paste0(1,rep(0,nchar(100)))
paste0(1,paste0(rep(0,nchar(100))))
paste0(1,paste0(rep(0,nchar(100)),collapse=""))
as.numeric(paste0(1,paste0(rep(0,nchar(100)),collapse="")))
round_any?
fr
?round_any
steps <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
field <- c(1,100,100)
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(max(field))),collapse="")))
steps <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
magnitude
plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
n <- 5
plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(max(field))),collapse="")))
step_size <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
steps <- seq(min(field),max(field),step_size)
steps
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(max(field) - min(field)),collapse="")))
step_size <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(max(field) - min(field)),collapse=""))))
step_size <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
steps <- seq(min(field),max(field),step_size)
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(median(field))),collapse="")))
step_size <- plyr::round_any((max(field) - min(field))/n,magnitude,ceiling)
steps <- seq(min(field),max(field),step_size)
steps
step_size <- (max(field) - min(field))/n
steps <- seq(min(field),max(field),step_size)
steps
field
field <- c(1,100,100)
step_size <- (max(field) - min(field))/n
steps <- seq(min(field),max(field),step_size)
steps
field <- c(1,100,1000)
step_size <- (max(field) - min(field))/n
steps <- seq(min(field),max(field),step_size)
steps
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(median(field))),collapse="")))
magnitude
step_size
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(median(step_size))),collapse="")))
magnitude
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar((step_size[n/2]))),collapse="")))
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar((step_size[ceiling(n/2)]))),collapse="")))
nchar((step_size[ceiling(n/2)]))
nchar((step_size[2]))
step_size
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar((step_size))),collapse="")))
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))),collapse="")))
magnitude
round(step_size)
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
magnitude
step_size <- (max(field) - min(field))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
step_size <- plyr::round_any(step_size,magnitude)
step_size
steps <- seq(min(field),max(field),step_size)
steps
step_size <- (max(field) - min(field))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
steps <- seq(min(field),max(field),step_size)
steps <- plyr::round_any(steps,magnitude)
steps
equal_interval <- function(data,field,n,forcezero=TRUE) {
field_fun <- data %>%
pull(field)
step_size <- (max(field) - min(field))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
classes <- plyr::round_any(seq(min(field),max(field),step_size),magnitude)
if(forcezero==TRUE) {
for(i in 1:length(classes)) {
if(classes[i] < 0 & classes[i+1] >= 0) {
classes <- c(classes[1:i],0,classes[i+1:length(classes)])
}
}
}
for(i in 1:n) {
if (i == 1) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- class_lab
data_out <- data %>%
rename("field_class"=sym(field)) %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~NA))
} else if (i != n) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~classified))
} else {
class_lab <- paste0(format(classes[i],big.mark=","), "+")
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i]~class_lab,
TRUE~classified))
}
}
data_out %>%
rename(field=field_class) %>%
mutate(classified=factor(classified,order))
}
equal_interval(field)
field <- data.frame(field)
field
field <- data.frame(field,"field")
field
equal_interval(field,"field")
field <- data.frame(field)
field
field <- data.frame(c(1,100,1000,245,234,656))
field
colnames(field) <- "field"
equal_interval(field,"field")
field <- field %>% mutate(field=as.numeric(field))
equal_interval(field,"field")
df <- field
rm(field)
equal_interval(df,"field")
df$field
typeof(df$field)
equal_interval <- function(data,field,n,forcezero=TRUE) {
field_fun <- data %>%
pull(field)
step_size <- (max(field_fun) - min(field_fun))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
classes <- plyr::round_any(seq(min(field_fun),max(field_fun),step_size),magnitude)
if(forcezero==TRUE) {
for(i in 1:length(classes)) {
if(classes[i] < 0 & classes[i+1] >= 0) {
classes <- c(classes[1:i],0,classes[i+1:length(classes)])
}
}
}
for(i in 1:n) {
if (i == 1) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- class_lab
data_out <- data %>%
rename("field_class"=sym(field)) %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~NA))
} else if (i != n) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~classified))
} else {
class_lab <- paste0(format(classes[i],big.mark=","), "+")
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i]~class_lab,
TRUE~classified))
}
}
data_out %>%
rename(field=field_class) %>%
mutate(classified=factor(classified,order))
}
typeof(df$field)
equal_interval(df,"field")
equal_interval(df,"field",5)
devtools::document()
equal_interval <- function(data,field,n,forcezero=TRUE) {
field_fun <- data %>%
pull(field) %>%
as.numeric()
options(scipen = FALSE)
step_size <- (max(field_fun,na.rm = TRUE) - min(field_fun,na.rm = TRUE))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
classes <- plyr::round_any(seq(min(field_fun,na.rm = TRUE),max(field_fun,na.rm = TRUE),step_size),magnitude)
if(forcezero==TRUE) {
for(i in 1:length(classes)) {
if(classes[i] < 0 & classes[i+1] >= 0) {
classes <- c(classes[1:i],0,classes[i+1:length(classes)])
}
}
}
for(i in 1:n) {
if (i == 1) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- class_lab
data_out <- data %>%
rename("field_class"=sym(field)) %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~NA))
} else if (i != n) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~classified))
} else {
class_lab <- paste0(format(classes[i],big.mark=","), "+")
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i]~class_lab,
TRUE~classified))
}
}
data_out %>%
rename(field=field_class) %>%
mutate(classified=factor(classified,order))
}
equal_interval(df,"field",5)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
options(scipen = FALSE)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
options(scipen = 999)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
options(scipen = 999999)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
df <- data.frame("field"=c(1,100,1000,10000000))
options(scipen = 9999999999999999999999999)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
options(scipen = 999)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
equal_interval <- function(data,field,n,forcezero=TRUE) {
field_fun <- data %>%
pull(field) %>%
as.numeric()
options(scipen = 999)
step_size <- (max(field_fun,na.rm = TRUE) - min(field_fun,na.rm = TRUE))/n
magnitude <- as.numeric(paste0(1,paste0(rep(0,nchar(round(step_size))-1),collapse="")))
classes <- plyr::round_any(seq(min(field_fun,na.rm = TRUE),max(field_fun,na.rm = TRUE),step_size),magnitude)
if(forcezero==TRUE) {
for(i in 1:length(classes)) {
if(classes[i] < 0 & classes[i+1] >= 0) {
classes <- c(classes[1:i],0,classes[i+1:length(classes)])
}
}
}
for(i in 1:n) {
if (i == 1) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- class_lab
data_out <- data %>%
rename("field_class"=sym(field)) %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~NA))
} else if (i != n) {
class_lab <- paste0(format(classes[i],big.mark=","), "-", format(classes[i+1],big.mark=","))
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i] & field_class < classes[i+1]~class_lab,
TRUE~classified))
} else {
class_lab <- paste0(format(classes[i],big.mark=","), "+")
order <- c(order,class_lab)
data_out <- data_out %>%
mutate(classified=case_when(field_class >= classes[i]~class_lab,
TRUE~classified))
}
}
data_out %>%
rename(field=field_class) %>%
mutate(classified=factor(classified,order))
}
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
df <- data.frame("field"=c(1,100,1000,10000000))
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/equal_interval.R", echo=TRUE)
equal_interval(df,"field",5)
source("C:/Users/mds64585/OneDrive - University of Georgia/CVIOG/duanes.tools/R/load_dependencies.R", echo=TRUE)
load_dependencies()
